                       * ****************************** * 
                       *        Yamagi Quake II         *
                       *  http://www.yamagi.org/quake2  *
                       *    http://github.com/yquake2   *
                       * ****************************** *
                                    
                                    TODO List

=============================================================================== 

At this time there're no open tasks regaring Quake II. Nevertheless the hints
for working with the code:

- Sign up for a Github account and fork our yquake2 repository. This allows the
  easy integration of upstream changes into your branch and sending of pull
  requests. You'll get a wiki and a bugtracker for free.
- To contribute your changes back into the main project send pull requests via
  Github. It's much easier to review and merge pull requests than patches.
  Please send only pull reqeuests from a distinct branch at not from your
  "master" branch!
- Quake II has a very fragile and broken codebase. Even after years of cleanup
  it's still a disaster. Therefore: 
  - Do only one change at a time!
  - Test after each change (play at least through base1.bsp)
  - Commit early and commit often to create a fine grained history.  This helps
    "git bisect" to find bugs and errors.
  - Do not try to clean up things or even rewrite code that you do not
    understand to 110%! Even small behavioral changes can introduce gameplay
    changes and trigger new bugs! Especially everything that depends on map data
    (e.g. path finding or collision detection) is very likely to break in
    interesting ways!
- Do not add new dependencies. If you must add a new one contact the Yamagi
  Quake II developers prior to it! Everything that adds dependencies should be
  hided behint preprocessor macros.
- If your changes change the gameplay experience, make them optional by
  introducing a new cvar. 
- Linux is not the only operating system out there. All changes should be
  portable to other platform (writing pure ANSI-C or C99 is recommended but not
  always applicable).
- x86 ist not the only CPU architecture. All changes should be done in pure C
  (e.g. no inline assembler) and in an endianess independed way.
- gcc is not the only compiler. Test your changes with clang.

